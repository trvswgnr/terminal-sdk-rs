/*
 * Terminal API
 *
 * The Terminal API gives you access to the same API that powers the award winning Terminal SSH shop (`ssh terminal.shop`).
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// Product : Product sold in the Terminal shop.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct Product {
    /// Unique object identifier. The format and length of IDs may change over time.
    #[serde(rename = "id")]
    pub id: String,
    /// Name of the product.
    #[serde(rename = "name")]
    pub name: String,
    /// Description of the product.
    #[serde(rename = "description")]
    pub description: String,
    /// List of variants of the product.
    #[serde(rename = "variants")]
    pub variants: Vec<models::ProductVariant>,
    /// Order of the product used when displaying a sorted list of products.
    #[serde(rename = "order", skip_serializing_if = "Option::is_none")]
    pub order: Option<i32>,
    /// Whether the product must be or can be subscribed to.
    #[serde(rename = "subscription", skip_serializing_if = "Option::is_none")]
    pub subscription: Option<Subscription>,
    #[serde(rename = "tags", skip_serializing_if = "Option::is_none")]
    pub tags: Option<Box<models::ProductTags>>,
}

impl Product {
    /// Product sold in the Terminal shop.
    pub fn new(id: String, name: String, description: String, variants: Vec<models::ProductVariant>) -> Product {
        Product {
            id,
            name,
            description,
            variants,
            order: None,
            subscription: None,
            tags: None,
        }
    }
}
/// Whether the product must be or can be subscribed to.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Subscription {
    #[serde(rename = "allowed")]
    Allowed,
    #[serde(rename = "required")]
    Required,
}

impl Default for Subscription {
    fn default() -> Subscription {
        Self::Allowed
    }
}

