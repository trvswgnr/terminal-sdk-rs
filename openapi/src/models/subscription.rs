/*
 * Terminal API
 *
 * The Terminal API gives you access to the same API that powers the award winning Terminal SSH shop (`ssh terminal.shop`).
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// Subscription : Subscription to a Terminal shop product.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct Subscription {
    /// Unique object identifier. The format and length of IDs may change over time.
    #[serde(rename = "id")]
    pub id: String,
    /// ID of the product variant being subscribed to.
    #[serde(rename = "productVariantID")]
    pub product_variant_id: String,
    /// Quantity of the subscription.
    #[serde(rename = "quantity")]
    pub quantity: i32,
    /// ID of the shipping address used for the subscription.
    #[serde(rename = "addressID")]
    pub address_id: String,
    /// ID of the card used for the subscription.
    #[serde(rename = "cardID")]
    pub card_id: String,
    #[serde(rename = "schedule", skip_serializing_if = "Option::is_none")]
    pub schedule: Option<Box<models::SubscriptionSchedule>>,
    /// Next shipment and billing date for the subscription.
    #[serde(rename = "next", skip_serializing_if = "Option::is_none")]
    pub next: Option<String>,
}

impl Subscription {
    /// Subscription to a Terminal shop product.
    pub fn new(id: String, product_variant_id: String, quantity: i32, address_id: String, card_id: String) -> Subscription {
        Subscription {
            id,
            product_variant_id,
            quantity,
            address_id,
            card_id,
            schedule: None,
            next: None,
        }
    }
}

