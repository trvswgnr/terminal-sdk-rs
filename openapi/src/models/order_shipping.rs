/*
 * Terminal API
 *
 * The Terminal API gives you access to the same API that powers the award winning Terminal SSH shop (`ssh terminal.shop`).
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// OrderShipping : Shipping address of the order.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct OrderShipping {
    /// The recipient's name.
    #[serde(rename = "name")]
    pub name: String,
    /// Street of the address.
    #[serde(rename = "street1")]
    pub street1: String,
    /// Apartment, suite, etc. of the address.
    #[serde(rename = "street2", skip_serializing_if = "Option::is_none")]
    pub street2: Option<String>,
    /// City of the address.
    #[serde(rename = "city")]
    pub city: String,
    /// Province or state of the address.
    #[serde(rename = "province", skip_serializing_if = "Option::is_none")]
    pub province: Option<String>,
    /// ISO 3166-1 alpha-2 country code of the address.
    #[serde(rename = "country")]
    pub country: String,
    /// Zip code of the address.
    #[serde(rename = "zip")]
    pub zip: String,
    /// Phone number of the recipient.
    #[serde(rename = "phone", skip_serializing_if = "Option::is_none")]
    pub phone: Option<String>,
}

impl OrderShipping {
    /// Shipping address of the order.
    pub fn new(name: String, street1: String, city: String, country: String, zip: String) -> OrderShipping {
        OrderShipping {
            name,
            street1,
            street2: None,
            city,
            province: None,
            country,
            zip,
            phone: None,
        }
    }
}

